// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSSocialLoginsLib
import AuthenticationServices
import Foundation
@_exported import OSSocialLoginsLib
import Swift
import UIKit
import _Concurrency
public struct UserInfo : Swift.Encodable, Swift.Equatable {
  public static func == (a: OSSocialLoginsLib.UserInfo, b: OSSocialLoginsLib.UserInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SocialLoginsErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case appleSignInGenericError
  case loginCancelledError
  case missingInputParametersError
  case googleSignInGenericError
  case googleInvalidConfigurationError
  case googleMissingAccessTokenError
  case googleMissingUserIdError
  case googleConfigurationNotValidError
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SocialLoginsGoogleController : OSSocialLoginsLib.SocialLoginsBaseController {
  override convenience public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
public protocol SocialLoginsProtocol {
  func callBackUserInfo(result: OSSocialLoginsLib.UserInfo?, error: OSSocialLoginsLib.SocialLoginsErrors?, callBackID: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class SocialLoginsAppleController : OSSocialLoginsLib.SocialLoginsBaseController {
  @objc public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithError error: Swift.Error)
  override public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerDelegate {
  @objc dynamic public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithAuthorization authorization: AuthenticationServices.ASAuthorization)
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerPresentationContextProviding {
  @objc dynamic public func presentationAnchor(for controller: AuthenticationServices.ASAuthorizationController) -> AuthenticationServices.ASPresentationAnchor
}
@objc open class SocialLoginsController : ObjectiveC.NSObject {
  public init(appleController: OSSocialLoginsLib.SocialLoginsAppleController, googleController: OSSocialLoginsLib.SocialLoginsGoogleController)
  public func loginApple(callbackID: Swift.String)
  public func loginGoogle(callbackID: Swift.String)
  @objc deinit
}
extension AuthenticationServices.ASAuthorizationAppleIDCredential {
  public var userIdentifier: Swift.String? {
    get
  }
  public var givenName: Swift.String? {
    get
  }
  public var familyName: Swift.String? {
    get
  }
}
@objc public class SocialLoginsBaseController : ObjectiveC.NSObject {
  public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
extension Swift.Encodable {
  public func encode() -> Swift.String
}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Equatable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Hashable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.RawRepresentable {}
