// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSSocialLoginsLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SocialLoginsLinkedInController : OSSocialLoginsLib.SocialLoginsBaseController {
  override convenience public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
public struct UserInfo : Swift.Encodable, Swift.Equatable {
  public static func == (a: OSSocialLoginsLib.UserInfo, b: OSSocialLoginsLib.UserInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SocialLoginsErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case appleSignInGenericError
  case loginCancelledError
  case missingInputParametersError
  case googleSignInGenericError
  case googleInvalidConfigurationError
  case googleMissingAccessTokenError
  case googleMissingUserIdError
  case googleConfigurationNotValidError
  case facebookSignInGenericError
  case facebookNoTokenFoundError
  case facebookNoResultsError
  case facebookInputParametersError
  case facebookUserDataRequestError
  case facebookConfigurationNotValidError
  case linkedInGenericError
  case linkedInSignInRequestError
  case linkedInWebAuthenticationSessionError
  case linkedInInputParametersError
  case linkedInConfigurationMissingError
  case linkedInConfigurationNotValidError
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SocialLoginsFacebookController : OSSocialLoginsLib.SocialLoginsBaseController {
  override convenience public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SocialLoginsGoogleController : OSSocialLoginsLib.SocialLoginsBaseController {
  override convenience public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SocialLoginsApplicationDelegate : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @objc @_Concurrency.MainActor(unsafe) public static let shared: OSSocialLoginsLib.SocialLoginsApplicationDelegate
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol SocialLoginsProtocol {
  func callBackUserInfo(result: OSSocialLoginsLib.UserInfo?, error: OSSocialLoginsLib.SocialLoginsErrors?)
}
@objc @_inheritsConvenienceInitializers public class SocialLoginsAppleController : OSSocialLoginsLib.SocialLoginsBaseController {
  @objc public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithError error: Swift.Error)
  override public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerDelegate {
  @objc dynamic public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithAuthorization authorization: AuthenticationServices.ASAuthorization)
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerPresentationContextProviding {
  @objc dynamic public func presentationAnchor(for controller: AuthenticationServices.ASAuthorizationController) -> AuthenticationServices.ASPresentationAnchor
}
@objc open class SocialLoginsController : ObjectiveC.NSObject {
  public init(appleController: OSSocialLoginsLib.SocialLoginsAppleController, googleController: OSSocialLoginsLib.SocialLoginsGoogleController, facebookController: OSSocialLoginsLib.SocialLoginsFacebookController, linkedInController: OSSocialLoginsLib.SocialLoginsLinkedInController)
  public func loginApple()
  public func loginGoogle()
  public func loginFacebook()
  public func loginLinkedIn(state: Swift.String, clientID: Swift.String, redirectURI: Swift.String)
  @objc deinit
}
extension AuthenticationServices.ASAuthorizationAppleIDCredential {
  public var userIdentifier: Swift.String? {
    get
  }
  public var givenName: Swift.String? {
    get
  }
  public var familyName: Swift.String? {
    get
  }
}
@objc public class SocialLoginsBaseController : ObjectiveC.NSObject {
  public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
}
extension Swift.Encodable {
  public func encode() -> Swift.String
}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Equatable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Hashable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.RawRepresentable {}
