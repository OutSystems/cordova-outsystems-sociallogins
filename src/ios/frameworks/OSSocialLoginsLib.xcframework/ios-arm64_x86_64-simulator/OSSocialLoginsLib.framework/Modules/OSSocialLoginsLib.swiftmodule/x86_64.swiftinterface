// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSSocialLoginsLib
import AuthenticationServices
import Foundation
import GoogleSignIn
@_exported import OSSocialLoginsLib
import Swift
import UIKit
import _Concurrency
public struct UserInfo : Swift.Encodable, Swift.Equatable {
  public static func == (a: OSSocialLoginsLib.UserInfo, b: OSSocialLoginsLib.UserInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SocialLoginsErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case appleSignInGenericError
  case loginCancelledError
  case missingInputParametersError
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class SocialLoginsGoogleController {
  public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol)
  @objc deinit
}
public protocol SocialLoginsProtocol {
  func callBackUserInfo(result: OSSocialLoginsLib.UserInfo?, error: OSSocialLoginsLib.SocialLoginsErrors?, callBackID: Swift.String)
}
@objc public class SocialLoginsAppleController : ObjectiveC.NSObject {
  public init(delegate: OSSocialLoginsLib.SocialLoginsProtocol)
  @objc public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithError error: Swift.Error)
  @objc deinit
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerDelegate {
  @objc dynamic public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithAuthorization authorization: AuthenticationServices.ASAuthorization)
}
extension OSSocialLoginsLib.SocialLoginsAppleController : AuthenticationServices.ASAuthorizationControllerPresentationContextProviding {
  @objc dynamic public func presentationAnchor(for controller: AuthenticationServices.ASAuthorizationController) -> AuthenticationServices.ASPresentationAnchor
}
@objc open class SocialLoginsController : ObjectiveC.NSObject {
  public init(appleController: OSSocialLoginsLib.SocialLoginsAppleController, googleController: OSSocialLoginsLib.SocialLoginsGoogleController, rootViewController: UIKit.UIViewController)
  public func loginApple(callbackID: Swift.String)
  public func loginGoogle(callbackID: Swift.String)
  public func loginFacebook(callbackID: Swift.String)
  @objc deinit
}
public protocol AppleIDCredentialProtocol {
  var userIdentifier: Swift.String? { get }
  var identityToken: Foundation.Data? { get }
  var email: Swift.String? { get }
  var givenName: Swift.String? { get }
  var familyName: Swift.String? { get }
}
extension AuthenticationServices.ASAuthorizationAppleIDCredential : OSSocialLoginsLib.AppleIDCredentialProtocol {
  public var userIdentifier: Swift.String? {
    get
  }
  public var givenName: Swift.String? {
    get
  }
  public var familyName: Swift.String? {
    get
  }
}
extension Swift.Encodable {
  public func encode() -> Swift.String
}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Equatable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.Hashable {}
extension OSSocialLoginsLib.SocialLoginsErrors : Swift.RawRepresentable {}
